function createStillTriplet_sbu(command_str,position)
% Function for creating the SBU and data files according to still triplet.
global setup

if nargin == 0
    command_str = 'initialize';
    position = [1 30 1276 720];
elseif nargin == 1
    position = [1 30 1276 720];
end

if ~strcmp(command_str,'initialize')
    % RETRIEVE HANDLES AND REDEFINE THE HANDLE VARIABLES.
    % Assume that the current figure contains the backgroundQuestions.
    h_fig = gcf;
    if ~strcmp(get(h_fig,'tag'),'createStillTriplet_sbu')
        % If the current figure does not have the right tag, find the one that does.
        h_figs = get(0,'children');
        h_fig = findobj(h_figs,'flat', 'tag','createStillTriplet_sbu');
        
        if isempty(h_fig)
            % If the fun_plt4 GUI does not exist initialize it. Then run the command string
            % that was originally requested.
            randomization('initialize'); %first initialize
            randomization(command_str); %then run the required command
            return;
        end
    end
    % At this point we know that h_fig is the handle to the figure containing the GUI of interest to
    % this function. Therefore we can use this figure handle to cut down on the number of objects
    % that need to be searched for tag names as follows:
    
end

% INITIALIZE THE GUI SECTION.
if strcmp(command_str,'initialize')
    
    % Make sure that the GUI has not been already initialized in another existing figure.
    % NOTE THAT THIS GUI INSTANCE CHECK IS NOT REQUIRED, UNLESS YOU WANT TO INSURE THAT ONLY
    % ONE INSTANCE OF THE GUI IS CREATED!
    h_figs = get(0,'children');
    h_fig = findobj(h_figs,'flat', 'tag','createStillTriplet_sbu');
    if ~isempty(h_fig)
        figure(h_fig(1));
        return
    end
    
    % Main figure %--------------------------------------------------------
    %
    h_fig = figure('position', position,...
        'name','Create triplet comparison SBU', ...
        'tag','createStillTriplet_sbu');
    
    
    h_textBox21 = findobj(h_fig(1),'tag','textBox21');
    h_textBox22 = findobj(h_fig(1),'tag','textBox22');
    h_textBox23 = findobj(h_fig(1),'tag','textBox23');
    h_textBox24 = findobj(h_fig(1),'tag','textBox24');
    h_textBox25 = findobj(h_fig(1),'tag','textBox25');
    h_textBox26 = findobj(h_fig(1),'tag','textBox26');
    h_textBox27 = findobj(h_fig(1),'tag','textBox27');
    h_textBox28 = findobj(h_fig(1),'tag','textBox28');
    h_textBox29 = findobj(h_fig(1),'tag','textBox29');
    h_textBox30 = findobj(h_fig(1),'tag','textBox30');
    h_textBox31 = findobj(h_fig(1),'tag','textBox31');
    h_textBox32 = findobj(h_fig(1),'tag','textBox32');
    h_textBox33 = findobj(h_fig(1),'tag','textBox33');
    h_textBox34 = findobj(h_fig(1),'tag','textBox34');
    h_textBox35 = findobj(h_fig(1),'tag','textBox35');
    h_textBox36 = findobj(h_fig(1),'tag','textBox36');
    
    ref_button4 = findobj(h_fig(1),'tag','ref_button4');
    

    
    % CV Information %-----------------------------------------------------
    %
    h_panel0 = uipanel(h_fig, ...
        'title', 'CVs', ...
        'Units', 'Normalized', ...
        'Position',[0.01 0.7 0.5 0.3], ...
        'Tag', 'panel0',...
        'fontsize',12);
    
    uicontrol(h_panel0, ...
        'Style','text', ...
        'Units', 'normalized', ...
        'Position',[.55 .7 .15 .1], ...
        'String','Number:', ...
        'FontSize', 12);
    
    uicontrol(h_panel0, ...
        'Style','edit', ...
        'Units', 'normalized', ...
        'Position',[.7 .69 .1 .13], ...
        'CallBack',@no_of_cv1,...
        'tag','textBox11', ...
        'BackgroundColor', 'w',...
        'fontsize',12);
    
    uicontrol(h_panel0, ...
        'Style','text', ...
        'Units', 'normalized', ...
        'Position',[.55 .3 .15 .1], ...
        'String','Number:', ...
        'FontSize', 12);
    
    uicontrol(h_panel0, ...
        'Style','edit', ...
        'Units', 'normalized', ...
        'Position',[.7 .29 .1 .13], ...
        'CallBack',@no_of_cv2,...
        'tag','textBox12', ...
        'BackgroundColor', 'w',...
        'fontsize',12);
    
    uicontrol(h_panel0, ...
        'Style','text', ...
        'Units', 'normalized', ...
        'Position',[0.7 0.02 0.3 0.26], ...
        'String','(3, 7, 9, 13, 15, 19, 21, 25, 27)', ...
        'FontSize', 12,...
        'HorizontalAlignment','left');
    
    uicontrol(h_panel0, ...
        'Style','text', ...
        'Units', 'normalized', ...
        'Position',[.05 .7 .3 .1], ...
        'String','CV1 name:', ...
        'FontSize', 12);
    
    uicontrol(h_panel0, ...
        'Style','edit',...
        'Units', 'normalized', ...
        'Position',[.28 .69 .2 .13], ...
        'CallBack',@name_of_cv1,...
        'tag','textBox13', ...
        'BackgroundColor', 'w',...
        'fontsize',12,...
        'string','contents');
    
    uicontrol(h_panel0, ...
        'Style','text', ...
        'Units', 'normalized', ...
        'Position',[.05 .3 .3 .1], ...
        'String','CV2 name:', ...
        'FontSize', 12);
    
    uicontrol(h_panel0, ...
        'Style','edit', ...
        'Units', 'normalized', ...
        'Position',[.28 .29 .2 .13], ...
        'CallBack',@name_of_cv2,...
        'tag','textBox14', ...
        'BackgroundColor', 'w',...
        'fontsize',12,...
        'string','pipes');
    
    %----------------------------------------------------------------------
    %
    % Randomizing options--------------------------------------------------
    % randomizing panel
    randomizing_panel = uipanel(h_fig, ...
        'title', 'Stimulus Options', ...
        'Units', 'Normalized', ...
        'Position',[0.01 0.35 0.5 0.35], ...
        'Tag', 'randomizing_panel',...
        'fontsize',12);
    
    uicontrol(randomizing_panel,...
        'Style','popupmenu', ...
        'units', 'normalized', ...
        'String',{'Select randomizing mode...','Serial presentation',...
        'Random presentation'},...
        'Value',1, ...
        'Position',[0.01 0.85 0.95 0.1],...
        'CallBack',@randomizing_mode_sel,...
        'visible','on',...
        'tag','randomizing_mode',...
        'fontsize',12);
    
    uicontrol(randomizing_panel, ...
        'Style','text', ...
        'Units', 'normalized', ...
        'Position',[0.01 0.65 0.99 0.17], ...
        'String','', ...
        'FontSize', 12,...
        'tag','help_text',...
        'HorizontalAlignment','left');
    
    uicontrol(randomizing_panel,...
        'style','pushbutton', ...
        'Units', 'Normalized', ...
        'position',[0.72 0.03 0.26 0.1],...
        'CallBack',@preview_randomizing_indexes,...
        'tag','preview_randomizing', ...
        'string','Preview indices', ...
        'FontSize', 12);
    
    uicontrol(randomizing_panel,...
        'style','checkbox',...
        'units','normalized',...
        'position',[0.01 0.1 0.6 0.2], ...
        'string','Masking image between trials',...
        'value',0,...
        'tag','monitors_checkbox',...
        'CallBack',@isMasking, ...
        'FontSize', 12);
    
    
    % Viewing time selection
    uicontrol(randomizing_panel, ...
        'Style','text', ...
        'Units', 'normalized', ...
        'Position',[0.01 0.35 0.9 0.17], ...
        'String','Set viewing time for the triplet. Seconds or 0 until button press:', ...
        'FontSize', 12,...
        'tag','viewing_text',...
        'HorizontalAlignment','left');
    
    uicontrol(randomizing_panel, ...
        'Style','edit', ...
        'Units', 'normalized', ...
        'Position',[.01 .29 .2 .13], ...
        'CallBack',@viewing_time,...
        'tag','viewing_time_box', ...
        'string','0',...
        'BackgroundColor', 'w',...
        'fontsize',12);
    
    % Monitor options------------------------------------------------------
    %
    % Monitor options panel
    monitors_panel = uipanel(h_fig,...
        'title','Monitor options',...
        'Units', 'Normalized', ...
        'Position',[0.01 0.01 0.5 0.34], ...
        'Tag', 'panel8',...
        'fontsize',12);
    
    uicontrol(monitors_panel,...
        'Style','popupmenu',...
        'units', 'normalized',  ...
        'String',{'Select content for left monitor...','Stimulus 1',...
        'Stimulus 2','Stimulus 3','Questions','Disabled'},...
        'Value',1, ...
        'Position',[0.01 0.8 0.25 0.1],...
        'CallBack',@monitor_choice,...
        'tag','left_monitor', ...
        'FontSize', 12);
    
    uicontrol(monitors_panel,...
        'Style','popupmenu',...
        'units', 'normalized', ...
        'String',{'Select content for center monitor...','Stimulus 1',...
        'Stimulus 2','Stimulus 3','Questions','Disabled'},...
        'Value',1, ...
        'Position',[0.01 0.68 0.25 0.1],...
        'CallBack',@monitor_choice,...
        'tag','center_monitor', ...
        'FontSize', 12);
    
    uicontrol(monitors_panel,...
        'Style','popupmenu',...
        'units', 'normalized', ...
        'String',{'Select content for right monitor...','Stimulus 1',...
        'Stimulus 2','Stimulus 3','Questions','Disabled'},...
        'Value',1, ...
        'Position',[0.01 0.56 0.25 0.1],...
        'CallBack',@monitor_choice,...
        'tag','right_monitor', ...
        'FontSize', 12);
    
    uicontrol(monitors_panel,...
        'Style','popupmenu',...
        'units', 'normalized', ...
        'String',{'Select content for bottom monitor...','Stimulus 1',...
        'Stimulus 2','Stimulus 3','Questions','Disabled'},...
        'Value',1, ...
        'Position',[0.01 0.45 0.25 0.1],...
        'CallBack',@monitor_choice,...
        'tag','bottom_monitor', ...
        'FontSize', 12);
    
    uicontrol(monitors_panel,...
        'style','checkbox',...
        'units','normalized',...
        'position',[0.03 0.2 0.6 0.2], ...
        'string','Randomized monitors',...
        'value',0,...
        'tag','monitors_checkbox',...
        'CallBack',@isRandomMonitors, ...
        'FontSize', 12); 

    uicontrol(monitors_panel, ...
        'Style','edit', ...
        'Units', 'normalized', ...
        'string',setup.screens_info13,...
        'Position',[.45 .77 .1 .1], ...
        'CallBack',@size_of_s1_x,...
        'tag','textBox21', ...
        'BackgroundColor', 'w', ...
        'FontSize', 12); 
    uicontrol(monitors_panel, ...
        'Style','edit', ...
        'Units', 'normalized', ...
        'string',setup.screens_info14,...
        'Position',[.55 .77 .1 .1], ...
        'CallBack',@size_of_s1_y,...
        'tag','textBox22', ...
        'BackgroundColor', 'w', ...
        'FontSize', 12);
    
    
    uicontrol(monitors_panel, ...
        'Style','edit', ...
        'Units', 'normalized', ...
        'string',setup.screens_info23,...
        'Position',[.45 .66 .1 .1], ...
        'CallBack',@size_of_s2_x,...
        'tag','textBox23', ...
        'BackgroundColor', 'w', ...
        'FontSize', 12); 
    uicontrol(monitors_panel, ...
        'Style','edit', ...
        'Units', 'normalized', ...
        'string',setup.screens_info24,...
        'Position',[.55 .66 .1 .1], ...
        'CallBack',@size_of_s2_y,...
        'tag','textBox24', ...
        'BackgroundColor', 'w', ...
        'FontSize', 12);
    
    uicontrol(monitors_panel, ...
        'Style','edit', ...
        'Units', 'normalized', ...
        'string',setup.screens_info33,...
        'Position',[.45 .55 .1 .1], ...
        'CallBack',@size_of_s3_x,...
        'tag','textBox25', ...
        'BackgroundColor', 'w', ...
        'FontSize', 12); 
    uicontrol(monitors_panel, ...
        'Style','edit', ...
        'Units', 'normalized', ...
        'string',setup.screens_info34,...
        'Position',[.55 .55 .1 .1], ...
        'CallBack',@size_of_s3_y,...
        'tag','textBox26', ...
        'BackgroundColor', 'w', ...
        'FontSize', 12);
    
   uicontrol(monitors_panel, ...
        'Style','edit', ...
        'Units', 'normalized', ...
        'string',setup.screens_info43,...
        'Position',[.45 .44 .1 .1], ...
        'CallBack',@size_of_s4_x,...
        'tag','textBox27', ...
        'BackgroundColor', 'w', ...
        'FontSize', 12); 
    uicontrol(monitors_panel, ...
        'Style','edit', ...
        'Units', 'normalized', ...
        'string',setup.screens_info44,...
        'Position',[.55 .44 .1 .1], ...
        'CallBack',@size_of_s4_y,...
        'tag','textBox28', ...
        'BackgroundColor', 'w', ...
        'FontSize', 12);

    
    uicontrol(monitors_panel, ...
        'Style','edit', ...
        'Units', 'normalized', ...
        'string',setup.screens_info11,...
        'Position',[.7 .77 .1 .1], ...
        'CallBack',@position_of_s1_x,...
        'tag','textBox29', ...
        'BackgroundColor', 'w', ...
        'FontSize', 12); 
    uicontrol(monitors_panel, ...
        'Style','edit', ...
        'Units', 'normalized', ...
        'string',setup.screens_info12,...
        'Position',[.8 .77 .1 .1], ...
        'CallBack',@position_of_s1_y,...
        'tag','textBox30', ...
        'BackgroundColor', 'w', ...
        'FontSize', 12);   
    
    uicontrol(monitors_panel, ...
        'Style','edit', ...
        'Units', 'normalized', ...
        'string',setup.screens_info21,...
        'Position',[.7 .66 .1 .1], ...
        'CallBack',@position_of_s2_x,...
        'tag','textBox31', ...
        'BackgroundColor', 'w', ...
        'FontSize', 12); 
    uicontrol(monitors_panel, ...
        'Style','edit', ...
        'Units', 'normalized', ...
        'string',setup.screens_info22,...
        'Position',[.8 .66 .1 .1], ...
        'CallBack',@position_of_s2_y,...
        'tag','textBox32', ...
        'BackgroundColor', 'w', ...
        'FontSize', 12);
    
    uicontrol(monitors_panel, ...
        'Style','edit', ...
        'Units', 'normalized', ...
        'string',setup.screens_info31,...
        'Position',[.7 .55 .1 .1], ...
        'CallBack',@position_of_s3_x,...
        'tag','textBox33', ...
        'BackgroundColor', 'w', ...
        'FontSize', 12); 
    uicontrol(monitors_panel, ...
        'Style','edit', ...
        'Units', 'normalized', ...
        'string',setup.screens_info32,...
        'Position',[.8 .55 .1 .1], ...
        'CallBack',@position_of_s3_y,...
        'tag','textBox34', ...
        'BackgroundColor', 'w', ...
        'FontSize', 12);
    
   uicontrol(monitors_panel, ...
        'Style','edit', ...
        'Units', 'normalized', ...
        'string',setup.screens_info41,...
        'Position',[.7 .44 .1 .1], ...
        'CallBack',@position_of_s4_x,...
        'tag','textBox35', ...
        'BackgroundColor', 'w', ...
        'FontSize', 12); 
    uicontrol(monitors_panel, ...
        'Style','edit', ...
        'Units', 'normalized', ...
        'string',setup.screens_info42,...
        'Position',[.8 .44 .1 .1], ...
        'CallBack',@position_of_s4_y,...
        'tag','textBox36', ...
        'BackgroundColor', 'w', ...
        'FontSize', 12);

    % Text labels for monitor selections-----------------------------------
    uicontrol(monitors_panel,...
        'Style','text', ...
        'Units','normalized',...
        'Position',[0.32 0.77 0.1 0.08], ...
        'String','Left', ...
        'FontSize', 12,...
        'horizontal','left');
    
    uicontrol(monitors_panel, ...
        'Style','text', ...
        'Units', 'normalized', ...
        'Position',[0.32 0.66 0.1 0.08], ...
        'String','Center', ...
        'FontSize', 12,...
        'horizontal','left');
    
    uicontrol(monitors_panel, ...
        'Style','text', ...
        'Units', 'normalized', ...
        'Position',[0.32 0.55 0.1 0.08], ...
        'String','Right', ...
        'FontSize', 12,...
        'horizontal','left');
    
    uicontrol(monitors_panel, ...
        'Style','text', ...
        'Units', 'normalized',...
        'Position',[0.32 0.44 0.1 0.08], ...
        'String','Bottom', ...
        'FontSize', 12,...
        'horizontal','left');
    
    uicontrol(monitors_panel, ...
        'Style','text', ...
        'Units', 'normalized',...
        'Position',[0.45 0.88 0.2 0.1], ...
        'String','Stimulus Size', ...
        'FontSize', 11);
    
    uicontrol(monitors_panel, ...
        'Style','text', ...
        'Units', 'normalized',...
        'Position',[0.65 0.88 0.3 0.1], ...
        'String','Stimulus position', ...
        'FontSize', 11);
    
    %-- preview stimulus displays -button--------------------------------
    uicontrol(monitors_panel,...
        'style','pushbutton', ...
        'Units', 'Normalized', ...
        'position',[0.72 0.03 0.26 0.1],...
        'CallBack',@preview_displays,...
        'tag','button5', ...
        'string','Preview displays', ...
        'FontSize', 12,...
        'back',[230/255 232/255 250/255]);
    

    %----------------------------------------------------------------------
    % Feedback checkbox
    uicontrol(h_fig,...
        'Style','check', ...
        'Units','normalized',...
        'Position',[0.55 0.8 0.3 0.06], ...
        'String','Ask for feedback after the test', ...
        'callback',@enable_feedback,...
        'FontSize', 12,...
        'back',[0.8 0.8 0.8]);
    
    % Feedback text
    uicontrol(h_fig, ...
        'Style','edit', ...
        'Units', 'normalized', ...
        'Position',[.55 0.78 .3 .04], ...
        'CallBack',@feedback_text,...
        'tag','feedback_text', ...
        'BackgroundColor', 'w', ...
        'FontSize', 12,...
        'string','Please feel free to give us any feedback from the experiment:',...
        'horizontal','left',...
        'enable','off');
    
    %----------------------------------------------------------------------
    % Continue button
    uicontrol(h_fig,...
        'style','pushbutton', ...
        'Units', 'Normalized', ...
        'position',[0.73 0.01 0.26 0.03],...
        'CallBack',@continue_button,...
        'tag','continue_button', ...
        'string','Save and continue to QBU', ...
        'FontSize', 12,...
        'back','green');
    
    %----------------------------------------------------------------------
    % Save as -button
    uicontrol(h_fig, ...
        'style','pushbutton', ...
        'Units', 'Normalized', ...
        'position',[0.52 0.01 0.17 .03],...
        'CallBack',@saveas, ...
        'tag','saveas', ...
        'string','Save as...', ...
        'FontSize', 12,...
        'back',[230/255 232/255 250/255]);
    
end



%%%%%%%%%%%%%CALLBACKS%%%%%%%%------------------------------

% Size and position of stimulus display callbacks

function size_of_s1_x(source,~)
global setup
setup.screens_info13 = str2double(get(source,'string'));
disp(strcat('Size of stimulus display 1 X: ',num2str(setup.screens_info13)));

function size_of_s1_y(source,~)
global setup
setup.screens_info14 = str2double(get(source,'string'));
disp(strcat('Size of stimulus display 1 X: ',num2str(setup.screens_info14)));

function size_of_s2_x(source,~)
global setup
setup.screens_info23 = str2double(get(source,'string'));
disp(strcat('Size of stimulus display 2 X: ',num2str(setup.screens_info23)));

function size_of_s2_y(source,~)
global setup
setup.screens_info24 = str2double(get(source,'string'));
disp(strcat('Size of stimulus display 2 Y: ',num2str(setup.screens_info24)));

function size_of_s3_x(source,~)
global setup
setup.screens_info33 = str2double(get(source,'string'));
disp(strcat('Size of stimulus display 3 X: ',num2str(setup.screens_info33)));

function size_of_s3_y(source,~)
global setup
setup.screens_info34 = str2double(get(source,'string'));
disp(strcat('Size of stimulus display 3 Y: ',num2str(setup.screens_info34)));

function size_of_s4_x(source,~)
global setup
setup.screens_info43 = str2double(get(source,'string'));
disp(strcat('Size of stimulus display 4 X: ',num2str(setup.screens_info43)));

function size_of_s4_y(source,~)
global setup
setup.screens_info44 = str2double(get(source,'string'));
disp(strcat('Size of stimulus display 4 Y: ',num2str(setup.screens_info44)));

function position_of_s1_x(source,~)
global setup
setup.screens_info11 = str2double(get(source,'string'));
disp(strcat('Position of stimulus display 1 X: ',num2str(setup.screens_info11)));

function position_of_s1_y(source,~)
global setup
setup.screens_info12 = str2double(get(source,'string'));
disp(strcat('Position of stimulus display 1 Y: ',num2str(setup.screens_info12)));

function position_of_s2_x(source,~)
global setup
setup.screens_info21 = str2double(get(source,'string'));
disp(strcat('Position of stimulus display 2 X: ',num2str(setup.screens_info21)));

function position_of_s2_y(source,~)
global setup
setup.screens_info22 = str2double(get(source,'string'));
disp(strcat('Position of stimulus display 2 Y: ',num2str(setup.screens_info22)));

function position_of_s3_x(source,~)
global setup
setup.screens_info31 = str2double(get(source,'string'));
disp(strcat('Position of stimulus display 3 X: ',num2str(setup.screens_info31)));

function position_of_s3_y(source,~)
global setup
setup.screens_info32 = str2double(get(source,'string'));
disp(strcat('Position of stimulus display 3 Y: ',num2str(setup.screens_info32)));

function position_of_s4_x(source,~)
global setup
setup.screens_info41 = str2double(get(source,'string'));
disp(strcat('Position of stimulus display 4 X: ',num2str(setup.screens_info41)));

function position_of_s4_y(source,~)
global setup
setup.screens_info42 = str2double(get(source,'string'));
disp(strcat('Position of stimulus display 4 Y: ',num2str(setup.screens_info42)));


% Preview display callbacks
function preview_displays(~,~)
global setup
    fig_sti1=figure('position',[setup.screens_info11 setup.screens_info12  setup.screens_info13 setup.screens_info14])
    uicontrol('Style','text',...
        'Position',[setup.screens_info13/2-50 setup.screens_info14/2-30 100 60],...
        'FontSize', 16,...
        'String',setup.left_monitor)
  
    fig_sti2=figure('position',[setup.screens_info21 setup.screens_info22  setup.screens_info23 setup.screens_info24])
        uicontrol('Style','text',...
        'Position',[setup.screens_info23/2-50 setup.screens_info24/2-30 100 60],...
        'FontSize', 16,...
        'String',setup.center_monitor)
    
    fig_sti3=figure('position',[setup.screens_info31 setup.screens_info32  setup.screens_info33 setup.screens_info34])
        uicontrol('Style','text',...
        'Position',[setup.screens_info33/2-50 setup.screens_info34/2-30 100 60],...
        'FontSize', 16,...
        'String',setup.right_monitor)
    
    fig_sti4=figure('position',[setup.screens_info41 setup.screens_info42  setup.screens_info43 setup.screens_info44])
        uicontrol('Style','text',...
        'Position',[setup.screens_info43/2-50 setup.screens_info44/2-30 100 60],...
        'FontSize', 16,...
        'String',setup.bottom_monitor)
    
    pause(1)
    close(fig_sti1);
    close(fig_sti2);
    close(fig_sti3);
    close(fig_sti4);


% CV information callbacks
function no_of_cv1(source,~)
global setup
setup.cv1 = str2double(get(source,'string'));
disp(strcat('Amount of CV1: ',num2str(setup.cv1)));

function no_of_cv2(source,~)
global setup
setup.cv2 = str2double(get(source,'string'));
disp(strcat('Amount of CV2: ',num2str(setup.cv2)));

function name_of_cv1(source,~)
global setup
setup.cv1_name = get(source,'string');
disp(strcat('Name of CV1: ',setup.cv1_name));

function name_of_cv2(source,~)
global setup
setup.cv2_name = get(source,'string');
disp(strcat('Name of CV2: ',setup.cv2_name));

% Randomizing information callbacks
function randomizing_mode_sel(source,~)
str = get(source, 'String');
val = get(source, 'value');
global setup

switch str{val};
    case 'Serial presentation'
        disp('Serial presentation selected')
        setup.random_mode = 'serial';
        set(findobj(gcf,'tag','help_text'),...
            'string','CV1 is locked and CV2s are gone through serially for each CV1')
    case 'Random presentation'
        disp('Random presentation selected')
        setup.random_mode = 'both';
        set(findobj(gcf,'tag','help_text'),...
            'string','CV1 is locked after the first pick and CV2s are gone through randomly for each CV1.')
    otherwise
        disp('Randomizing mode not selected')
        set(findobj(gcf,'tag','help_text'),...
            'string','')
        
        
end

function preview_randomizing_indexes(~,~)
global setup
if isempty(setup.cv1) || isempty(setup.cv2)
    disp('Choose the number of CVs before continuing')
    return
end

% Check the cv2 amount
numbers = [3 7 9 13 15 19 21 25 27];
tmp = numbers == setup.cv2;
if tmp == 0
    disp('Impossible number of CV2s. Please choose 3, 7, 9, 13, 15, 19, 21, 25 or 27 ')
    return
end

setup.sequences = createTripletRandomization(setup);

%disp('Stimulus indexes:')
%disp(setup.sequences)

% Test for randomness
[h1_1 p1_1 ] = runstest(setup.sequences(:,1));
[h1_2 p1_2 ] = runstest(setup.sequences(:,2));
[h2_1 p2_1 ] = runstest(setup.sequences(:,3));
[h2_2 p2_2 ] = runstest(setup.sequences(:,4));
[h3_1 p3_1 ] = runstest(setup.sequences(:,5));
[h3_2 p3_2 ] = runstest(setup.sequences(:,6));


warning off

disp('Test for randomness using the runs test:')
if h1_1 == 0
   disp(['CV1_1 in random order. h0 accepted with p = ' num2str(p1_1)])
else
    disp(['CV1_1 not in random order. h0 rejected with p = ' num2str(p1_1)])
end
if h1_2 == 0
   disp(['CV1_2 in random order. h0 accepted with p = ' num2str(p1_2)])
else
    disp(['CV1_2 not in random order. h0 rejected with p = ' num2str(p1_2)])
end
if h2_1 == 0
   disp(['CV2_1 in random order. h0 accepted with p = ' num2str(p2_1)])
else
    disp(['CV2_1 not in random order. h0 rejected with p = ' num2str(p2_1)])
end
if h2_2 == 0
   disp(['CV2_2 in random order. h0 accepted with p = ' num2str(p2_2)])
else
    disp(['CV2_2 not in random order. h0 rejected with p = ' num2str(p2_2)])
end
if h3_1 == 0
   disp(['CV3_1 in random order. h0 accepted with p = ' num2str(p3_1)])
else
    disp(['CV3_1 not in random order. h0 rejected with p = ' num2str(p3_1)])
end
if h3_2 == 0
   disp(['CV3_2 in random order. h0 accepted with p = ' num2str(p3_2)])
else
    disp(['CV3_2 not in random order. h0 rejected with p = ' num2str(p3_2)])
end

function isMasking(source,~)
global setup
if get(source,'value') == 1
    setup.is_masking = 1;
    disp('Masking image is shown between trials on each monitor')
else
    setup.is_masking = 0;
    disp('Masking image is not shown between trials')
end

% Monitor options callback functions---------------------------------------
function monitor_choice(source,~)
str = get(source, 'String');
val = get(source, 'value');
global setup

% Initialization check
if isempty(setup.left_monitor) == 1
    setup.left_monitor = 'Disabled';
elseif isempty(setup.center_monitor) == 1
    setup.center_monitor = 'Disabled';
elseif isempty(setup.right_monitor) == 1
    setup.right_monitor = 'Disabled';
elseif isempty(setup.bottom_monitor) == 1
    setup.bottom_monitor = 'Disabled';
end

% Set the types
type = get(source,'tag');
if strcmp(type,'left_monitor') == 1
    switch str{val};
        case 'Stimulus 1'
            setup.left_monitor = 'Stimulus 1';
            disp('Left monitor: stimulus 1')
        case 'Stimulus 2'
            setup.left_monitor = 'Stimulus 2';
            disp('Left monitor: stimulus 2')
        case 'Stimulus 3'
            setup.left_monitor = 'Stimulus 3';
            disp('Left monitor: stimulus 3')
        case 'Disabled'
            setup.left_monitor = 'Disabled';
            disp('Left monitor: disabled')
        case 'Questions'
            setup.left_monitor = 'Questions';
            disp('Left monitor: questions')
        otherwise
            disp('Left monitor set to disabled')
            setup.left_monitor = 'Disabled';
    end
elseif strcmp(type,'center_monitor') == 1
    switch str{val};
        case 'Stimulus 1'
            setup.center_monitor = 'Stimulus 1';
        case 'Stimulus 2'
            setup.center_monitor = 'Stimulus 2';
        case 'Stimulus 3'
            setup.center_monitor = 'Stimulus 3';
        case 'Disabled'
            setup.center_monitor = 'Disabled';
        case 'Questions'
            setup.center_monitor = 'Questions';
        otherwise
            disp('Center monitor set to disabled')
            setup.center_monitor = 'Disabled';
    end
elseif strcmp(type,'right_monitor') == 1
    switch str{val};
        case 'Stimulus 1'
            setup.right_monitor = 'Stimulus 1';
        case 'Stimulus 2'
            setup.right_monitor = 'Stimulus 2';
        case 'Stimulus 3'
            setup.right_monitor = 'Stimulus 3';
        case 'Disabled'
            setup.right_monitor = 'Disabled';
        case 'Questions'
            setup.right_monitor = 'Questions';
        otherwise
            disp('Right monitor set to disabled')
            setup.right_monitor = 'Disabled';
    end
else
    switch str{val};
        case 'Stimulus 1'
            setup.bottom_monitor = 'Stimulus 1';
        case 'Stimulus 2'
            setup.bottom_monitor = 'Stimulus 2';
        case 'Stimulus 3'
            setup.bottom_monitor = 'Stimulus 3';
        case 'Disabled'
            setup.bottom_monitor = 'Disabled';
        case 'Questions'
            setup.bottom_monitor = 'Questions';
        otherwise
            disp('Bottom monitor set to disabled')
            setup.bottom_monitor = 'Disabled';
    end
end

function isRandomMonitors(source,~)
global setup
if get(source,'value') == 1
    setup.random_monitors = 1;
    disp('Monitors are randomized. Trial stimuli are directed randomly to Stimulus 1, 2 and 3 monitors.')
else
    setup.random_monitors = 0;
    disp('Monitors stay fixed for stimuli 1, 2 and 3')
end

%--------------------------------------------------------------------------
% Continue button callback
function continue_button(~,~)
global setup

disp(setup)

if setup.modifying == 0
    
    % Check the settings
    if isempty(setup.cv1) || isempty(setup.cv2)
        disp('Choose the number of CVs before continuing')
        return
    end
    
    if isempty(setup.random_mode)
        setup.random_mode = 'serial';
    end
    
    if isempty(setup.random_monitors)
        setup.random_monitors = 0;
    end
    
    if isempty(setup.is_masking)
        setup.is_masking = 0;
    end
    
    % Check monitors
    if strcmp(setup.left_monitor,'Stimulus 1') == 0 && ...
            strcmp(setup.right_monitor,'Stimulus 1') == 0 && ...
            strcmp(setup.center_monitor,'Stimulus 1') == 0 && ...
            strcmp(setup.bottom_monitor,'Stimulus 1') == 0
        disp('Stimulus 1 monitor not selected. Please select before continuing.')
        return
    elseif strcmp(setup.left_monitor,'Stimulus 2') == 0 && ...
            strcmp(setup.right_monitor,'Stimulus 2') == 0 && ...
            strcmp(setup.center_monitor,'Stimulus 2') == 0 && ...
            strcmp(setup.bottom_monitor,'Stimulus 2') == 0
        disp('Stimulus 2 monitor not selected. Please select before continuing.')
        return
    elseif strcmp(setup.left_monitor,'Stimulus 3') == 0 && ...
            strcmp(setup.right_monitor,'Stimulus 3') == 0 && ...
            strcmp(setup.center_monitor,'Stimulus 3') == 0 && ...
            strcmp(setup.bottom_monitor,'Stimulus 3') == 0
        disp('Stimulus 3 monitor not selected. Please select before continuing.')
        return
    elseif strcmp(setup.left_monitor,'Questions') == 0 && ...
            strcmp(setup.right_monitor,'Questions') == 0 && ...
            strcmp(setup.center_monitor,'Questions') == 0 && ...
            strcmp(setup.bottom_monitor,'Questions') == 0
        disp('Questions monitor not selected. Please select before continuing.')
        return
    end
    
    % Save settings
    save([pwd filesep 'setups' filesep setup.name filesep setup.name ...
        '_sbu.mat'],'setup')
    
    % Create the cross-tabulation excel sheets
    disp('Creating cross tabulation Excel sheets...')
    initCrossTabulationExcel();
    disp('Done.')

    
elseif setup.modifying == 1
    
    % Save settings
    save([pwd filesep 'setups' filesep setup.name filesep setup.name '_sbu.mat'],...
        'setup','-append')
end

disp(['Settings saved to: ' pwd filesep 'setups' filesep setup.name ...
    filesep setup.name '_sbu.mat'])

% Initialize the cross-tabulation history matrices
for i = 1 : setup.cv1
    crosstabulation(i).crosstabs1vs2 = zeros(setup.cv2,setup.cv2);
    crosstabulation(i).crosstabs1vs3 = zeros(setup.cv2,setup.cv2);
    crosstabulation(i).crosstabs2vs3 = zeros(setup.cv2,setup.cv2);
    crosstabulation(i).crosstabs_paste = zeros(setup.cv2,setup.cv2);
end

% Save the cross-tabulation history
save([pwd filesep 'setups' filesep setup.name filesep 'crosstabulation.mat'],...
    'crosstabulation')

% Exit SBU and initialize QBU with an old setup
if setup.modifying ~= 2
    % Save figure for 'back'- and 'modify'-buttons
    hgsave([pwd filesep 'setups' filesep setup.name filesep 'sbu_screen.fig']);
    
    handles = guihandles(gcf);
    guidata(gcf,handles);
    
    sbu_state = guidata(gcf);
    
    save([pwd filesep 'setups' filesep setup.name filesep 'sbu_state.mat'], ...
        'sbu_state');
    
end

% If we are saving a new setup with different name
if setup.modifying == 2
    tmp_name = setup.name;
    setup.name = setup.old_name;
end

% Check if were are modifying an existing gui
if setup.modifying == 1 || setup.modifying == 2
    position = get(gcf,'position');
    close all;
    % Load the figure
    hgload([pwd filesep 'setups' filesep setup.name filesep 'qbu_screen.fig']);
    set(gcf,'position',position)
    % Load saved handles
    load([pwd filesep 'setups' filesep setup.name filesep 'qbu_state.mat'])
    if setup.modifying == 2
        setup.name = tmp_name;
    end
else
    position = get(gcf,'position');
    close all;
    QBU('initialize',position);
end

% Viewing time edit box callback-------------------------------------------
function viewing_time(source,~)
global setup
time_value = str2double(get(source,'string'));

if isfloat(time_value) && time_value > 0
    setup.viewing_time = time_value;
else
    disp('Viewing time must be a non-negative integer.')
    setup.viewing_time = 0;
    set(source,'string',0)
end

% Pair repetition checkbox-------------------------------------------------
function isPairRepetition(source,~)
global setup
setup.pair_repetition = get(source,'value');

%--------------------------------------------------------------------------
% Feedback callback
function enable_feedback(source,~)
global setup
setup.feedback = get(source,'value');

if setup.feedback
    set(findobj('tag','feedback_text'),'enable','on')
    setup.feedback_text = get(findobj('tag','feedback_text'),'string');
else
    set(findobj('tag','feedback_text'),'enable','off')
end

% Feedback text callback
function feedback_text(source,~)
global setup
setup.feedback_text = get(source,'string');

%--------------------------------------------------------------------------
% Save as -callback
function saveas(~,~)
global setup

if setup.modifying == 0
    disp('You can not save a setup as modified before it has been created. Please continue to QBU.')
    return
end

setup.old_name = setup.name;
options.Resize='on';
options.WindowStyle='normal';
setup.name = inputdlg('Name the new setup:','Create new setup',1,{'Setup name'},options);
if isempty(setup.name)
    setup.name = setup.old_name;
    disp('Cancelled creating new setup')
    return
end
setup.name = [setup.name{1} '_' setup.version];

% Make directory for the new setup
dir_name = setup.name;
mkdir('setups',dir_name);

% Save figure for 'back'- and 'modify'-buttons
hgsave([pwd filesep 'setups' filesep setup.name filesep 'sbu_screen.fig']);

handles = guihandles(gcf);
guidata(gcf,handles);

sbu_state = guidata(gcf);

save([pwd filesep 'setups' filesep setup.name filesep 'sbu_state.mat'],'sbu_state');

% Initialize new setup directory
initSetup(@continue_button)
















